<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

/**
 * Created by DT Team.
 * AppName: NearbyStores
 */

class Event extends MAIN_Controller {

    public function __construct(){
        parent::__construct();
        $this->init("event");
    }



    public function onLoad()
    {

        define('MAX_EVENT_IMAGES',6);
        define('KS_NBR_EVENTS_MONTHLY','nbr_events_monthly');

        define('ADD_EVENT','add');
        define('EDIT_EVENT','edit');
        define('DELETE_EVENT','delete');
        define('MANAGE_EVENTS','manage_events');
        define('MANAGE_EVENTS_PARTICIPANTS','manage_participants');
        define('MANAGE_EVENT_CONFIG_ADMIN','event_config');


        $this->load->model('event/event_model','mEventModel');
        $this->load->helper('event/event');
        $this->load->library('form_validation');

    }

    public function onCommitted($isEnabled)
    {
        parent::onCommitted($isEnabled); // TODO: Change the autogenerated stub

        if(!$isEnabled)
            return;

        AdminTemplateManager::registerMenu(
            'event',
            "event/menu",
            3
        );

        AdminTemplateManager::registerMenu(
            'event',
            "event/menu-client",
            3,
            'Client'
        );

        //Setup User Config
        UserSettingSubscribe::set('event',array(
            'field_name' => KS_NBR_EVENTS_MONTHLY,
            'field_type' => UserSettingSubscribeTypes::INT,
            'field_default_value' => -1,
            'config_key' => 'NBR_EVENTS_MONTHLY',
            'field_label' => 'Events Allowed Monthly',
            'field_sub_label' => '( -1 Unlimited )',
            'field_comment' => '',
        ));


        if($this->mUserBrowser->isLogged() && GroupAccess::isGranted('event')){

            $this->load->helper('cms/charts');

            SimpleChart::add('event','chart_v1_home',function ($months){

                if(GroupAccess::isGranted('event',MANAGE_EVENTS)){
                    return $this->mEventModel->getEventsAnalytics($months);
                }else{
                    return $this->mEventModel->getEventsAnalytics($months,$this->mUserBrowser->getData('id_user'));
                }

            });
        }


        //add FK to an store
        StoreManager::subscribe('event','store_id');

        //User action listener
        ActionsManager::register('user','user_switch_to',function ($args){
            $this->mEventModel->switchTo($args['from'], $args['to']);
        });


        $this->registerCampaignModule();


        //handle store deleted action
        ActionsManager::register("store","onDelete",function ($args){
            if(isset($args['id'])){
                $this->db->where("store_id",$args['id']);
                $this->db->delete("event");
            }
        });

        //register upload clear folder
        $this->onClearUploadFolder();

        $this->mEventModel->create_default_checkout_fields();


        //store
        NSModuleLinkers::newInstance('event','getData',function ($args){

            $objs = $this->db->where('id_event',$args['id'])
                ->get('event',1)->result_array();

            if(isset($objs[0])){
                return array(
                    'label' => $objs[0]['name'],
                    'label_description' => $objs[0]['description'],
                );
            }

            return NULL;
        });

        $this->mEventModel->registerBookingEvent();

    }


    private function onClearUploadFolder()
    {
        ActionsManager::register("uploader","onClearFolder",function(){
            //get all active images
            return $this->mEventModel->getAllActiveImages();
        });
    }

    private function registerModuleActions(){


        GroupAccess::registerActions("event",array(
            ADD_EVENT,
            EDIT_EVENT,
            DELETE_EVENT,
            MANAGE_EVENTS,
            MANAGE_EVENTS_PARTICIPANTS,
            MANAGE_EVENT_CONFIG_ADMIN,
        ));

    }

    private function reloadModuleActions(){

        GroupAccess::reloadActions("event",array(
            ADD_EVENT,
            EDIT_EVENT,
            DELETE_EVENT,
            MANAGE_EVENTS,
            MANAGE_EVENTS_PARTICIPANTS,
            MANAGE_EVENT_CONFIG_ADMIN,
        ));

    }

    public function index(){

    }

    public function id(){

        $this->load->library('user_agent');

        $id = intval($this->uri->segment(3));

        if($id==0)
            redirect("?err=1");

        $platform =  $this->agent->platform();

        if(/*Checker::user_agent_exist($user_agent,"ios")*/ strtolower($platform)=="ios"){

            $link = site_url("event/id/$id");
            $link = str_replace('www.', '', $link);
            $link = str_replace('http://', 'nsapp://', $link);
            $link = str_replace('https://', 'nsapp://', $link);

            $this->session->set_userdata(array(
                "redirect_to" =>  $link
            ));

            redirect("");
        }

        redirect("");

    }

    public function onEnable()
    {
        $this->registerModuleActions();

        return TRUE;
    }

    public function onInstall()
    {
        parent::onInstall(); // TODO: Change the autogenerated stub
        $this->mEventModel->updateFields();
        $this->mEventModel->createTable();

        ConfigManager::setValue('ENABLE_AUTO_HIDDEN_EVENTS',FALSE,TRUE);
        ConfigManager::setValue('PARTICIPANTS_FIELDS_EMAIL_SHOWN',TRUE,TRUE);

        return TRUE;
    }

    public function onUpgrade()
    {
        parent::onUpgrade(); // TODO: Change the autogenerated stub
        $this->mEventModel->updateFields();
        $this->mEventModel->add_event_country_field();
        $this->mEventModel->create_default_checkout_fields();
        $this->mEventModel->createTable();
        $this->reloadModuleActions();

        ConfigManager::setValue('ENABLE_AUTO_HIDDEN_EVENTS',FALSE,TRUE);
        ConfigManager::setValue('PARTICIPANTS_FIELDS_EMAIL_SHOWN',TRUE,TRUE);

        return TRUE;
    }

    private function registerCampaignModule()
    {

        $event_cg_key = RequestInput::get("event_cg");
        $event_cg_data = (array)$this->session->userdata("campaign");
        $custom_parameters = RequestInput::post("custom_parameters");

        if($custom_parameters!="" && is_string($custom_parameters)){
            $custom_parameters = json_decode($custom_parameters,JSON_OBJECT_AS_ARRAY);
        }

        //custom_campaign
        if( (!empty($event_cg_data) && isset($event_cg_data[$event_cg_key]) )
            OR (!empty($custom_parameters) && isset($custom_parameters['custom_campaign']))){



            $event_data = array();

            if(!empty($event_cg_data) && isset($event_cg_data[$event_cg_key]) ){

                $event_id = $event_cg_data[$event_cg_key]['event_id'];
                $event_data = $this->mEventModel->getEvent($event_id);

                $o = array(
                    'text' =>  Text::output($event_data->name),
                    'id' =>  $event_data->id_event,
                    'title' =>  Text::output($event_data->name),
                    'description' =>  strip_tags(Text::output($event_data->description)),
                    'image' =>  ImageManagerUtils::getFirstImage( $event_data->images),
                );


                if(strlen($o['description'])>100){
                    $o['description'] = substr(strip_tags(Text::output($o['description'])),0,100).' ...';
                }

                $event_data = $o;

            }


            CampaignManager::register(array(
                'module' => $this,
                'api'    => site_url('ajax/event/getEventsAjax'),
                'callback_input' => function($args) {
                    //  $args['event'] = $campaign_data;
                    return $this->mEventModel->custom_campaign_input($args);
                },
                'callback_output' => function($args){
                    return $this->mEventModel->campaign_output($args);
                },

                'custom_parameters' => array(
                    'html' => $this->load->view('event/backend/custom_campaign/html',array('module'=>'event'),TRUE),
                    'script' => $this->load->view('event/backend/custom_campaign/script',array('module'=>'event','event_key'=>$event_cg_key,"extras"=>$event_data),TRUE),
                    'var' => "event_custom_parameters",
                )
            ));

        }else{



            //register event to campaign program
            CampaignManager::register(array(
                'module' => $this,
                'api'    => site_url('ajax/event/getEventsAjax'),
                'callback_input' => function($args){
                    return $this->mEventModel->campaign_input($args);
                },
                'callback_output' => function($args){
                    return $this->mEventModel->campaign_output($args);
                },

                'custom_parameters' => array(
                    'html' => $this->load->view('store/backend/campaign/html',array('module'=>'event'),TRUE),
                    'script' => $this->load->view('store/backend/campaign/script',array('module'=>'event'),TRUE),
                    'var' => "event_custom_parameters",
                )
            ));

        }

    }

    public function cron()
    {


    }


}

/* End of file EventDB.php */