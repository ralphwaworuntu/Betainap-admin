<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Booking extends MAIN_Controller implements AdminModuleLoader
{

    const MODULE_NAME = "booking";

    public function __construct()
    {
        parent::__construct();
        $this->init('booking');
    }

    public function onLoad()
    {
        $this->load->model("booking/Booking_model", "mBookingModel");
        $this->load->helper("booking/booking");

        define('GRP_MANAGE_MY_BOOKING','manage_my_booking');
        define('GRP_MANAGE_BOOKING','manage_booking');
        define('GRP_MANAGE_BOOKING_CONFIG','manage_booking_config');
    }


    public function onCommitted($isEnabled)
    {
        if(!$isEnabled)
            return;

        //register module menu
        AdminTemplateManager::registerMenu(
            Booking::MODULE_NAME,
            "booking/menu",
            3
        );

        //register module menu
        AdminTemplateManager::registerMenu(
            Booking::MODULE_NAME,
            "booking/menu-client",
            3,
            'Client'
        );



    }

    private function registerDashbordWidgets(){

        /*
        * Register Counter for Dashboard
        */

        if(SessionManager::isLogged()){
            if(SessionManager::getData("manager")==GroupAccess::ADMIN_ACCESS){
                CMS_Display::set(
                    'widget_booking',
                    'booking/backend/charts/counters',
                    $this->mBookingModel->bookingCounters(-1)
                );

                CMS_Display::set(
                    'booking.topBookedServices',
                    'booking/backend/charts/top-booked-services',
                    $this->mBookingModel->bookingCountersClient(SessionManager::getData("id_user"))
                );

                CMS_Display::set(
                    'booking.newPendingBooking',
                    'booking/backend/charts/last-booking',
                    $this->mBookingModel->getLastOwnerBooking(0)
                );

            }else if(SessionManager::getData("manager")==GroupAccess::OWNER_ACCESS){

                CMS_Display::set(
                    'widget_booking',
                    'booking/backend/charts/counters',
                    $this->mBookingModel->bookingCounters(SessionManager::getData("id_user"))
                );

                CMS_Display::set(
                    'booking.topBookedServices',
                    'booking/backend/charts/top-booked-services',
                    $this->mBookingModel->bookingCountersClient(SessionManager::getData("id_user"))
                );

                CMS_Display::set(
                    'booking.newPendingBooking',
                    'booking/backend/charts/last-booking',
                    $this->mBookingModel->getLastOwnerBooking(SessionManager::getData("id_user"))
                );

            }elseif(SessionManager::getData("manager")==GroupAccess::CLIENT_ACCESS){

                AdminTemplateManager::addCssLibs(
                    AdminTemplateManager::assets("booking","css/bookings.css")
                );


                CMS_Display::set(
                    'widget_booking',
                    'booking/backend/charts/client-counters',
                    $this->mBookingModel->bookingCountersClient(SessionManager::getData("id_user"))
                );

                CMS_Display::set("booking.newPendingBooking",
                    "booking/backend/client-dashboard/list",
                    $this->mBookingModel->getLastClientBooking(SessionManager::getData("id_user"))
                );

            }
        }
    }


    public static function registerOwnerDashboardChartWidget(){


        /*
         * Register widget
         */

        CMS_Display::set("booking.charts","booking/backend/charts/owner-dashboard/booking-widget",array(
            "client_id" => SessionManager::isLogged()
            && GroupAccess::isGranted("booking",GRP_MANAGE_BOOKING_CONFIG)? -1
                : SessionManager::getData("id_user")
        ));

        /*
         * Include css & Javascript libraries
         */


        AdminTemplateManager::addCssLibs(
            AdminTemplateManager::assets("booking","css/client-dashboard.css")
        );

        AdminTemplateManager::addCssLibs(
            AdminTemplateManager::assets("booking","plugins/morris.js/morris.css")
        );

    }


    public function onEnable()
    {

        GroupAccess::registerActions(Booking::MODULE_NAME,array(
            GRP_MANAGE_BOOKING,
            GRP_MANAGE_BOOKING_CONFIG
        ));


        return TRUE;
    }

    public function onUpgrade()
    {
        parent::onUpgrade(); // TODO: Change the autogenerated stub

        /*
         * Update field in the database
         */
        $this->mBookingModel->create_table();
        $this->mBookingModel->update_fields();

        /*
         * Register new word
         */
        Translate::updateLanguages("booking");


        GroupAccess::reloadActions(Booking::MODULE_NAME,array(
            GRP_MANAGE_BOOKING,
            GRP_MANAGE_BOOKING_CONFIG
        ));

        return TRUE;
    }


    public function onInstall()
    {
        parent::onInstall(); // TODO: Change the autogenerated stub

        $this->mBookingModel->create_table();
        $this->mBookingModel->update_fields();

        /*
        * Register new word
        */
        Translate::updateLanguages("booking");



        return TRUE;
    }



    public function onAdminLoaded($module)
    {
        /*
         * return bool / function
         */

        if(!ModulesChecker::isEnabled("booking")){
            return false;
        }

        return function (){
            //create dashboard widget for booking

            Booking::registerOwnerDashboardChartWidget();
            $this->registerDashbordWidgets();


        };
    }

}